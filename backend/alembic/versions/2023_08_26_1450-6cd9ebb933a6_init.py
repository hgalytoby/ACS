"""init

Revision ID: 6cd9ebb933a6
Revises: 
Create Date: 2023-08-26 14:50:53.172014

"""
import sqlalchemy_utils
import sqlmodel
from alembic import op
import sqlalchemy as sa
from app.utils.enums import SystemLogEvent, UserLogEvent, ApiMethod

from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '6cd9ebb933a6'
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('AcceptApi',
                    sa.Column('id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
                    sa.Column('api', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
                    sa.Column('updated_at', sa.DateTime(), nullable=True),
                    sa.Column('created_at', sa.DateTime(), nullable=False),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_table('ApiGroup',
                    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(length=32), nullable=False),
                    sa.Column('id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
                    sa.Column('updated_at', sa.DateTime(), nullable=True),
                    sa.Column('created_at', sa.DateTime(), nullable=False),
                    sa.PrimaryKeyConstraint('id'),
                    sa.UniqueConstraint('name')
                    )
    op.create_table('EmailSettings',
                    sa.Column('event', sqlalchemy_utils.types.choice.ChoiceType(SystemLogEvent), nullable=True),
                    sa.Column('id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
                    sa.Column('subject', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
                    sa.Column('body', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
                    sa.Column('updated_at', sa.DateTime(), nullable=True),
                    sa.Column('created_at', sa.DateTime(), nullable=False),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_table('Frontend',
                    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(length=32), nullable=False),
                    sa.Column('value', sqlmodel.sql.sqltypes.AutoString(length=32), nullable=False),
                    sa.Column('parent_id', sqlmodel.sql.sqltypes.GUID(), nullable=True),
                    sa.Column('id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
                    sa.Column('updated_at', sa.DateTime(), nullable=True),
                    sa.Column('created_at', sa.DateTime(), nullable=False),
                    sa.Column('depth', sa.Integer(), nullable=False),
                    sa.ForeignKeyConstraint(['parent_id'], ['Frontend.id'], ),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_table('Member',
                    sa.Column('id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
                    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(length=32), nullable=False),
                    sa.Column('blood_type', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
                    sa.Column('birthday', sa.Date(), nullable=False),
                    sa.Column('phone', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
                    sa.Column('company', sqlmodel.sql.sqltypes.AutoString(length=32), nullable=False),
                    sa.Column('job_title', sqlmodel.sql.sqltypes.AutoString(length=32), nullable=False),
                    sa.Column('updated_at', sa.DateTime(), nullable=True),
                    sa.Column('created_at', sa.DateTime(), nullable=False),
                    sa.Column('image', sqlmodel.sql.sqltypes.AutoString(length=256), nullable=True),
                    sa.Column('qrcode', sqlmodel.sql.sqltypes.AutoString(length=256), nullable=True),
                    sa.PrimaryKeyConstraint('id'),
                    sa.UniqueConstraint('phone')
                    )
    op.create_table('MemberLocation',
                    sa.Column('id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
                    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(length=64), nullable=False),
                    sa.Column('updated_at', sa.DateTime(), nullable=True),
                    sa.Column('created_at', sa.DateTime(), nullable=False),
                    sa.Column('image', sqlmodel.sql.sqltypes.AutoString(length=256), nullable=True),
                    sa.PrimaryKeyConstraint('id'),
                    sa.UniqueConstraint('name')
                    )
    op.create_table('MemberRecord',
                    sa.Column('id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
                    sa.Column('status', sa.Boolean(), nullable=False),
                    sa.Column('member_location_id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
                    sa.Column('member_location_name', sqlmodel.sql.sqltypes.AutoString(length=64), nullable=False),
                    sa.Column('member_location_image', sqlmodel.sql.sqltypes.AutoString(length=256), nullable=True),
                    sa.Column('member_id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
                    sa.Column('member_name', sqlmodel.sql.sqltypes.AutoString(length=32), nullable=False),
                    sa.Column('member_phone', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
                    sa.Column('member_company', sqlmodel.sql.sqltypes.AutoString(length=32), nullable=False),
                    sa.Column('member_job_title', sqlmodel.sql.sqltypes.AutoString(length=32), nullable=False),
                    sa.Column('member_image', sqlmodel.sql.sqltypes.AutoString(length=256), nullable=True),
                    sa.Column('created_at', sa.DateTime(), nullable=False),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_table('Role',
                    sa.Column('id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
                    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(length=32), nullable=False),
                    sa.Column('updated_at', sa.DateTime(), nullable=True),
                    sa.Column('created_at', sa.DateTime(), nullable=False),
                    sa.Column('is_protected', sa.Boolean(), nullable=False),
                    sa.PrimaryKeyConstraint('id'),
                    sa.UniqueConstraint('name')
                    )
    op.create_table('SystemLog',
                    sa.Column('raw_data', postgresql.JSON(astext_type=sa.Text()), nullable=True),
                    sa.Column('event', sqlalchemy_utils.types.choice.ChoiceType(SystemLogEvent), nullable=True),
                    sa.Column('id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
                    sa.Column('created_at', sa.DateTime(), nullable=False),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_table('User',
                    sa.Column('id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
                    sa.Column('email', sqlmodel.sql.sqltypes.AutoString(length=320), nullable=False),
                    sa.Column('is_active', sa.Boolean(), nullable=False),
                    sa.Column('is_superuser', sa.Boolean(), nullable=False),
                    sa.Column('is_verified', sa.Boolean(), nullable=False),
                    sa.Column('username', sqlmodel.sql.sqltypes.AutoString(length=64), nullable=False),
                    sa.Column('updated_at', sa.DateTime(), nullable=True),
                    sa.Column('created_at', sa.DateTime(), nullable=False),
                    sa.Column('hashed_password', sqlmodel.sql.sqltypes.AutoString(length=1024), nullable=False),
                    sa.Column('avatar', sqlmodel.sql.sqltypes.AutoString(length=128), nullable=True),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_index(op.f('ix_User_email'), 'User', ['email'], unique=True)
    op.create_table('Api',
                    sa.Column('method', sqlalchemy_utils.types.choice.ChoiceType(ApiMethod), nullable=True),
                    sa.Column('group_id', sqlmodel.sql.sqltypes.GUID(), nullable=True),
                    sa.Column('id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
                    sa.Column('updated_at', sa.DateTime(), nullable=True),
                    sa.Column('created_at', sa.DateTime(), nullable=False),
                    sa.Column('uri', sqlmodel.sql.sqltypes.AutoString(length=128), nullable=False),
                    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(length=32), nullable=False),
                    sa.ForeignKeyConstraint(['group_id'], ['ApiGroup.id'], ),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_table('FrontendLink',
                    sa.Column('id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
                    sa.Column('frontend_id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
                    sa.Column('role_id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
                    sa.Column('created_at', sa.DateTime(), nullable=False),
                    sa.ForeignKeyConstraint(['frontend_id'], ['Frontend.id'], ),
                    sa.ForeignKeyConstraint(['role_id'], ['Role.id'], ),
                    sa.PrimaryKeyConstraint('id', 'frontend_id', 'role_id'),
                    comment='Frontend, Role'
                    )
    op.create_table('MemberStatus',
                    sa.Column('id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
                    sa.Column('status', sa.Boolean(), nullable=False),
                    sa.Column('created_at', sa.DateTime(), nullable=False),
                    sa.Column('member_id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
                    sa.Column('member_location_id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
                    sa.ForeignKeyConstraint(['member_id'], ['Member.id'], ),
                    sa.ForeignKeyConstraint(['member_location_id'], ['MemberLocation.id'], ),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_table('OAuthAccount',
                    sa.Column('id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
                    sa.Column('user_id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
                    sa.Column('oauth_name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
                    sa.Column('access_token', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
                    sa.Column('expires_at', sa.Integer(), nullable=True),
                    sa.Column('refresh_token', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
                    sa.Column('account_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
                    sa.Column('account_email', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
                    sa.ForeignKeyConstraint(['user_id'], ['User.id'], ),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_index(op.f('ix_OAuthAccount_account_id'), 'OAuthAccount', ['account_id'], unique=False)
    op.create_index(op.f('ix_OAuthAccount_oauth_name'), 'OAuthAccount', ['oauth_name'], unique=False)
    op.create_table('RoleLink',
                    sa.Column('id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
                    sa.Column('user_id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
                    sa.Column('role_id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
                    sa.Column('created_at', sa.DateTime(), nullable=False),
                    sa.ForeignKeyConstraint(['role_id'], ['Role.id'], ),
                    sa.ForeignKeyConstraint(['user_id'], ['User.id'], ),
                    sa.PrimaryKeyConstraint('id', 'user_id', 'role_id'),
                    comment='Role, User'
                    )
    op.create_table('UserLog',
                    sa.Column('raw_data', postgresql.JSON(astext_type=sa.Text()), nullable=True),
                    sa.Column('event', sqlalchemy_utils.types.choice.ChoiceType(UserLogEvent), nullable=True),
                    sa.Column('id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
                    sa.Column('created_at', sa.DateTime(), nullable=False),
                    sa.Column('user_id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
                    sa.ForeignKeyConstraint(['user_id'], ['User.id'], ),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_table('ApiLink',
                    sa.Column('id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
                    sa.Column('api_id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
                    sa.Column('role_id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
                    sa.Column('created_at', sa.DateTime(), nullable=False),
                    sa.ForeignKeyConstraint(['api_id'], ['Api.id'], ),
                    sa.ForeignKeyConstraint(['role_id'], ['Role.id'], ),
                    sa.PrimaryKeyConstraint('id', 'api_id', 'role_id'),
                    comment='Api, Role'
                    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('ApiLink')
    op.drop_table('UserLog')
    op.drop_table('RoleLink')
    op.drop_index(op.f('ix_OAuthAccount_oauth_name'), table_name='OAuthAccount')
    op.drop_index(op.f('ix_OAuthAccount_account_id'), table_name='OAuthAccount')
    op.drop_table('OAuthAccount')
    op.drop_table('MemberStatus')
    op.drop_table('FrontendLink')
    op.drop_table('Api')
    op.drop_index(op.f('ix_User_email'), table_name='User')
    op.drop_table('User')
    op.drop_table('SystemLog')
    op.drop_table('Role')
    op.drop_table('MemberRecord')
    op.drop_table('MemberLocation')
    op.drop_table('Member')
    op.drop_table('Frontend')
    op.drop_table('EmailSettings')
    op.drop_table('ApiGroup')
    op.drop_table('AcceptApi')
    # ### end Alembic commands ###
